/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/


#import "MSGraphFetchers.h"
#import "core/core.h"

@implementation MSGraphGroupFetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[MSGraphGroup class]]) {

		_operations = [[MSGraphGroupOperations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (void)update:(id)entity callback:(void (^)(MSGraphGroup *group, MSOrcError *e))callback {

	return [super update:entity callback:callback];
}

- (void)delete:(void (^)(int status, MSOrcError *e))callback {

	return [super deleteWithCallback:callback];
}

- (MSGraphGroupFetcher *)addCustomParametersWithName:(NSString *)name value:(id)value {
    [super addCustomParametersWithName:name value:value];
    
    return self;
}

- (MSGraphGroupFetcher *)addCustomHeaderWithName:(NSString *)name value:(NSString *)value {
    [super addCustomHeaderWithName:name value:value];
    
    return self;
}

- (MSGraphGroupFetcher *)select:(NSString *)params {
    [super select:params];
    
    return self;
}

- (MSGraphGroupFetcher *)expand:(NSString *)value {
    [super expand:value];
    
    return self;
}

- (void) readWithCallback:(void (^)(MSGraphGroup *group, MSOrcError *error))callback {
    [super readWithCallback:^(id response, MSOrcError *error) {
        callback(response, error);
    }];
}

- (MSGraphDirectoryObjectCollectionFetcher *)members {

    return [[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectFetcher *)membersById:(NSString *)identifier {

    return [[[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSGraphDirectoryObject class]] getById:identifier];

}

- (MSGraphDirectoryObjectCollectionFetcher *)memberOf {

    return [[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectFetcher *)memberOfById:(NSString *)identifier {

    return [[[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSGraphDirectoryObject class]] getById:identifier];

}

- (MSGraphDirectoryObjectFetcher *)createdOnBehalfOf {

	 return [[MSGraphDirectoryObjectFetcher alloc] initWithUrl:@"createdOnBehalfOf" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectCollectionFetcher *)owners {

    return [[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectFetcher *)ownersById:(NSString *)identifier {

    return [[[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSGraphDirectoryObject class]] getById:identifier];

}

- (MSGraphConversationThreadCollectionFetcher *)threads {

    return [[MSGraphConversationThreadCollectionFetcher alloc] initWithUrl:@"Threads" parent:self asClass:[MSGraphConversationThread class]];
}

- (MSGraphConversationThreadFetcher *)threadsById:(NSString *)identifier {

    return [[[MSGraphConversationThreadCollectionFetcher alloc] initWithUrl:@"Threads" parent:self asClass:[MSGraphConversationThread class]] getById:identifier];

}

- (MSGraphCalendarFetcher *)calendar {

	 return [[MSGraphCalendarFetcher alloc] initWithUrl:@"Calendar" parent:self asClass:[MSGraphCalendar class]];
}

- (MSGraphEventCollectionFetcher *)calendarView {

    return [[MSGraphEventCollectionFetcher alloc] initWithUrl:@"CalendarView" parent:self asClass:[MSGraphEvent class]];
}

- (MSGraphEventFetcher *)calendarViewById:(NSString *)identifier {

    return [[[MSGraphEventCollectionFetcher alloc] initWithUrl:@"CalendarView" parent:self asClass:[MSGraphEvent class]] getById:identifier];

}

- (MSGraphEventCollectionFetcher *)events {

    return [[MSGraphEventCollectionFetcher alloc] initWithUrl:@"Events" parent:self asClass:[MSGraphEvent class]];
}

- (MSGraphEventFetcher *)eventsById:(NSString *)identifier {

    return [[[MSGraphEventCollectionFetcher alloc] initWithUrl:@"Events" parent:self asClass:[MSGraphEvent class]] getById:identifier];

}

- (MSGraphConversationCollectionFetcher *)conversations {

    return [[MSGraphConversationCollectionFetcher alloc] initWithUrl:@"Conversations" parent:self asClass:[MSGraphConversation class]];
}

- (MSGraphConversationFetcher *)conversationsById:(NSString *)identifier {

    return [[[MSGraphConversationCollectionFetcher alloc] initWithUrl:@"Conversations" parent:self asClass:[MSGraphConversation class]] getById:identifier];

}

- (MSGraphProfilePhotoFetcher *)photo {

	 return [[MSGraphProfilePhotoFetcher alloc] initWithUrl:@"Photo" parent:self asClass:[MSGraphProfilePhoto class]];
}

- (MSGraphDirectoryObjectCollectionFetcher *)acceptedSenders {

    return [[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"AcceptedSenders" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectFetcher *)acceptedSendersById:(NSString *)identifier {

    return [[[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"AcceptedSenders" parent:self asClass:[MSGraphDirectoryObject class]] getById:identifier];

}

- (MSGraphDirectoryObjectCollectionFetcher *)rejectedSenders {

    return [[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"RejectedSenders" parent:self asClass:[MSGraphDirectoryObject class]];
}

- (MSGraphDirectoryObjectFetcher *)rejectedSendersById:(NSString *)identifier {

    return [[[MSGraphDirectoryObjectCollectionFetcher alloc] initWithUrl:@"RejectedSenders" parent:self asClass:[MSGraphDirectoryObject class]] getById:identifier];

}

- (MSGraphDriveFetcher *)drive {

	 return [[MSGraphDriveFetcher alloc] initWithUrl:@"drive" parent:self asClass:[MSGraphDrive class]];
}

@end
