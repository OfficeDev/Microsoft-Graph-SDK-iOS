/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphGroup
 *
 */
@implementation MSGraphGroup


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"description", @"_description", @"displayName", @"displayName", @"groupTypes", @"groupTypes", @"mail", @"mail", @"mailEnabled", @"mailEnabled", @"mailNickname", @"mailNickname", @"onPremisesLastSyncDateTime", @"onPremisesLastSyncDateTime", @"onPremisesSecurityIdentifier", @"onPremisesSecurityIdentifier", @"onPremisesSyncEnabled", @"onPremisesSyncEnabled", @"proxyAddresses", @"proxyAddresses", @"securityEnabled", @"securityEnabled", @"visibility", @"visibility", @"AccessType", @"accessType", @"AllowExternalSenders", @"allowExternalSenders", @"AutoSubscribeNewMembers", @"autoSubscribeNewMembers", @"IsFavorite", @"isFavorite", @"IsSubscribedByMail", @"isSubscribedByMail", @"UnseenCount", @"unseenCount", @"members", @"members", @"memberOf", @"memberOf", @"createdOnBehalfOf", @"createdOnBehalfOf", @"owners", @"owners", @"Threads", @"threads", @"Calendar", @"calendar", @"CalendarView", @"calendarView", @"Events", @"events", @"Conversations", @"conversations", @"Photo", @"photo", @"AcceptedSenders", @"acceptedSenders", @"RejectedSenders", @"rejectedSenders", @"drive", @"drive", @"id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.group";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		__description = (![dic objectForKey: @"description"] || [ [dic objectForKey: @"description"] isKindOfClass:[NSNull class]] )?__description:[[dic objectForKey: @"description"] copy];
		_displayName = (![dic objectForKey: @"displayName"] || [ [dic objectForKey: @"displayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"displayName"] copy];

        if([dic objectForKey: @"groupTypes"] != [NSNull null]){
            _groupTypes = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"groupTypes"]) {
                [_groupTypes addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_groupTypes resetChangedFlag];
        }
        
		_mail = (![dic objectForKey: @"mail"] || [ [dic objectForKey: @"mail"] isKindOfClass:[NSNull class]] )?_mail:[[dic objectForKey: @"mail"] copy];
		_mailEnabled = (![dic objectForKey: @"mailEnabled"] || [ [dic objectForKey: @"mailEnabled"] isKindOfClass:[NSNull class]] )?_mailEnabled:[[dic objectForKey: @"mailEnabled"] boolValue];
		_mailNickname = (![dic objectForKey: @"mailNickname"] || [ [dic objectForKey: @"mailNickname"] isKindOfClass:[NSNull class]] )?_mailNickname:[[dic objectForKey: @"mailNickname"] copy];
		_onPremisesLastSyncDateTime = (![dic objectForKey: @"onPremisesLastSyncDateTime"] || [ [dic objectForKey: @"onPremisesLastSyncDateTime"] isKindOfClass:[NSNull class]] )?_onPremisesLastSyncDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"onPremisesLastSyncDateTime"]];
		_onPremisesSecurityIdentifier = (![dic objectForKey: @"onPremisesSecurityIdentifier"] || [ [dic objectForKey: @"onPremisesSecurityIdentifier"] isKindOfClass:[NSNull class]] )?_onPremisesSecurityIdentifier:[[dic objectForKey: @"onPremisesSecurityIdentifier"] copy];
		_onPremisesSyncEnabled = (![dic objectForKey: @"onPremisesSyncEnabled"] || [ [dic objectForKey: @"onPremisesSyncEnabled"] isKindOfClass:[NSNull class]] )?_onPremisesSyncEnabled:[[dic objectForKey: @"onPremisesSyncEnabled"] boolValue];

        if([dic objectForKey: @"proxyAddresses"] != [NSNull null]){
            _proxyAddresses = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"proxyAddresses"]) {
                [_proxyAddresses addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_proxyAddresses resetChangedFlag];
        }
        
		_securityEnabled = (![dic objectForKey: @"securityEnabled"] || [ [dic objectForKey: @"securityEnabled"] isKindOfClass:[NSNull class]] )?_securityEnabled:[[dic objectForKey: @"securityEnabled"] boolValue];
		_visibility = (![dic objectForKey: @"visibility"] || [ [dic objectForKey: @"visibility"] isKindOfClass:[NSNull class]] )?_visibility:[[dic objectForKey: @"visibility"] copy];
		_accessType = (![dic objectForKey: @"AccessType"] || [ [dic objectForKey: @"AccessType"] isKindOfClass:[NSNull class]] )?_accessType:[MSGraphGroupAccessTypeSerializer fromString:[dic objectForKey: @"AccessType"]];
		_allowExternalSenders = (![dic objectForKey: @"AllowExternalSenders"] || [ [dic objectForKey: @"AllowExternalSenders"] isKindOfClass:[NSNull class]] )?_allowExternalSenders:[[dic objectForKey: @"AllowExternalSenders"] boolValue];
		_autoSubscribeNewMembers = (![dic objectForKey: @"AutoSubscribeNewMembers"] || [ [dic objectForKey: @"AutoSubscribeNewMembers"] isKindOfClass:[NSNull class]] )?_autoSubscribeNewMembers:[[dic objectForKey: @"AutoSubscribeNewMembers"] boolValue];
		_isFavorite = (![dic objectForKey: @"IsFavorite"] || [ [dic objectForKey: @"IsFavorite"] isKindOfClass:[NSNull class]] )?_isFavorite:[[dic objectForKey: @"IsFavorite"] boolValue];
		_isSubscribedByMail = (![dic objectForKey: @"IsSubscribedByMail"] || [ [dic objectForKey: @"IsSubscribedByMail"] isKindOfClass:[NSNull class]] )?_isSubscribedByMail:[[dic objectForKey: @"IsSubscribedByMail"] boolValue];
		_unseenCount = (![dic objectForKey: @"UnseenCount"] || [ [dic objectForKey: @"UnseenCount"] isKindOfClass:[NSNull class]] )?_unseenCount:[[dic objectForKey: @"UnseenCount"] intValue];

        if([dic objectForKey: @"members"] != [NSNull null]){
            _members = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"members"]) {
                [_members addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_members resetChangedFlag];
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            _memberOf = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [_memberOf addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_memberOf resetChangedFlag];
        }
        
		_createdOnBehalfOf = (![dic objectForKey: @"createdOnBehalfOf"] || [ [dic objectForKey: @"createdOnBehalfOf"] isKindOfClass:[NSNull class]] )?_createdOnBehalfOf:[[MSGraphDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]];

        if([dic objectForKey: @"owners"] != [NSNull null]){
            _owners = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [_owners addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_owners resetChangedFlag];
        }
        

        if([dic objectForKey: @"Threads"] != [NSNull null]){
            _threads = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Threads"]) {
                [_threads addObject:[[MSGraphConversationThread alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_threads resetChangedFlag];
        }
        
		_calendar = (![dic objectForKey: @"Calendar"] || [ [dic objectForKey: @"Calendar"] isKindOfClass:[NSNull class]] )?_calendar:[[MSGraphCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]];

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarView resetChangedFlag];
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_events resetChangedFlag];
        }
        

        if([dic objectForKey: @"Conversations"] != [NSNull null]){
            _conversations = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Conversations"]) {
                [_conversations addObject:[[MSGraphConversation alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_conversations resetChangedFlag];
        }
        
		_photo = (![dic objectForKey: @"Photo"] || [ [dic objectForKey: @"Photo"] isKindOfClass:[NSNull class]] )?_photo:[[MSGraphProfilePhoto alloc] initWithDictionary: [dic objectForKey: @"Photo"]];

        if([dic objectForKey: @"AcceptedSenders"] != [NSNull null]){
            _acceptedSenders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"AcceptedSenders"]) {
                [_acceptedSenders addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_acceptedSenders resetChangedFlag];
        }
        

        if([dic objectForKey: @"RejectedSenders"] != [NSNull null]){
            _rejectedSenders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"RejectedSenders"]) {
                [_rejectedSenders addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_rejectedSenders resetChangedFlag];
        }
        
		_drive = (![dic objectForKey: @"drive"] || [ [dic objectForKey: @"drive"] isKindOfClass:[NSNull class]] )?_drive:[[MSGraphDrive alloc] initWithDictionary: [dic objectForKey: @"drive"]];
		self._id = (![dic objectForKey: @"id"] || [ [dic objectForKey: @"id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self._description copy];if (curVal!=nil) [dic setValue: curVal forKey: @"description"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.groupTypes) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"groupTypes"];}
	{id curVal = [self.mail copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mail"];}
	{[dic setValue: (self.mailEnabled?@"true":@"false") forKey: @"mailEnabled"];}
	{id curVal = [self.mailNickname copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mailNickname"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.onPremisesLastSyncDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesLastSyncDateTime"];}
	{id curVal = [self.onPremisesSecurityIdentifier copy];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesSecurityIdentifier"];}
	{[dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"proxyAddresses"];}
	{[dic setValue: (self.securityEnabled?@"true":@"false") forKey: @"securityEnabled"];}
	{id curVal = [self.visibility copy];if (curVal!=nil) [dic setValue: curVal forKey: @"visibility"];}
	{[dic setValue: [MSGraphGroupAccessTypeSerializer toString:self.accessType] forKey: @"AccessType"];}
	{[dic setValue: (self.allowExternalSenders?@"true":@"false") forKey: @"AllowExternalSenders"];}
	{[dic setValue: (self.autoSubscribeNewMembers?@"true":@"false") forKey: @"AutoSubscribeNewMembers"];}
	{[dic setValue: (self.isFavorite?@"true":@"false") forKey: @"IsFavorite"];}
	{[dic setValue: (self.isSubscribedByMail?@"true":@"false") forKey: @"IsSubscribedByMail"];}
	{[dic setValue: [NSNumber numberWithInt: self.unseenCount] forKey: @"UnseenCount"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.members) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"members"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{id curVal = [self.createdOnBehalfOf toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"owners"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.threads) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Threads"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarView"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Events"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.conversations) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Conversations"];}
	{id curVal = [self.photo toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Photo"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.acceptedSenders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"AcceptedSenders"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.rejectedSenders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"RejectedSenders"];}
	{id curVal = [self.drive toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"drive"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
    [dic setValue: @"#microsoft.graph.group" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self._description;
    if([self.updatedValues containsObject:@"description"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"description"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.groupTypes;
    if([self.updatedValues containsObject:@"groupTypes"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"groupTypes"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.groupTypes) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"groupTypes"];
        }
        
            }}
	{id curVal = self.mail;
    if([self.updatedValues containsObject:@"mail"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mail"];
            }
    }
 if([self.updatedValues containsObject:@"mailEnabled"])
            { [dic setValue: (self.mailEnabled?@"true":@"false") forKey: @"mailEnabled"];
}	{id curVal = self.mailNickname;
    if([self.updatedValues containsObject:@"mailNickname"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mailNickname"];
            }
    }
	{id curVal = self.onPremisesLastSyncDateTime;
    if([self.updatedValues containsObject:@"onPremisesLastSyncDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"onPremisesLastSyncDateTime"];
            }
    }
	{id curVal = self.onPremisesSecurityIdentifier;
    if([self.updatedValues containsObject:@"onPremisesSecurityIdentifier"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"onPremisesSecurityIdentifier"];
            }
    }
 if([self.updatedValues containsObject:@"onPremisesSyncEnabled"])
            { [dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];
}	{id curVal = self.proxyAddresses;
    if([self.updatedValues containsObject:@"proxyAddresses"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"proxyAddresses"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"proxyAddresses"];
        }
        
            }}
 if([self.updatedValues containsObject:@"securityEnabled"])
            { [dic setValue: (self.securityEnabled?@"true":@"false") forKey: @"securityEnabled"];
}	{id curVal = self.visibility;
    if([self.updatedValues containsObject:@"visibility"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"visibility"];
            }
    }
 if([self.updatedValues containsObject:@"AccessType"])
            { [dic setValue: [MSGraphGroupAccessTypeSerializer toString:self.accessType] forKey: @"AccessType"];
} if([self.updatedValues containsObject:@"AllowExternalSenders"])
            { [dic setValue: (self.allowExternalSenders?@"true":@"false") forKey: @"AllowExternalSenders"];
} if([self.updatedValues containsObject:@"AutoSubscribeNewMembers"])
            { [dic setValue: (self.autoSubscribeNewMembers?@"true":@"false") forKey: @"AutoSubscribeNewMembers"];
} if([self.updatedValues containsObject:@"IsFavorite"])
            { [dic setValue: (self.isFavorite?@"true":@"false") forKey: @"IsFavorite"];
} if([self.updatedValues containsObject:@"IsSubscribedByMail"])
            { [dic setValue: (self.isSubscribedByMail?@"true":@"false") forKey: @"IsSubscribedByMail"];
} if([self.updatedValues containsObject:@"UnseenCount"])
            { [dic setValue: [NSNumber numberWithInt: self.unseenCount] forKey: @"UnseenCount"];
}	{id curVal = self.members;
    if([self.updatedValues containsObject:@"members"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"members"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.members) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"members"];
        }
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"memberOf"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"memberOf"];
        }
        
            }}
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"owners"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"owners"];
        }
        
            }}
	{id curVal = self.threads;
    if([self.updatedValues containsObject:@"Threads"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Threads"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.threads) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Threads"];
        }
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"CalendarView"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarView"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarView"];
        }
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"Events"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Events"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Events"];
        }
        
            }}
	{id curVal = self.conversations;
    if([self.updatedValues containsObject:@"Conversations"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Conversations"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.conversations) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Conversations"];
        }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"Photo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Photo"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Photo"];
            }
        
            }}
	{id curVal = self.acceptedSenders;
    if([self.updatedValues containsObject:@"AcceptedSenders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"AcceptedSenders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.acceptedSenders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"AcceptedSenders"];
        }
        
            }}
	{id curVal = self.rejectedSenders;
    if([self.updatedValues containsObject:@"RejectedSenders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"RejectedSenders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.rejectedSenders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"RejectedSenders"];
        }
        
            }}
	{id curVal = self.drive;
    if([self.updatedValues containsObject:@"drive"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"drive"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"drive"];
            }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
            }
    }
    return dic;
}


/** Setter implementation for property _description
 *
 */
- (void) setDescription: (NSString *) value {
    __description = value;
    [self valueChangedFor:@"description"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property groupTypes
 *
 */
- (void) setGroupTypes: (NSMutableArray *) value {
    _groupTypes = value;
    [self valueChangedFor:@"groupTypes"];
}
       
/** Setter implementation for property mail
 *
 */
- (void) setMail: (NSString *) value {
    _mail = value;
    [self valueChangedFor:@"mail"];
}
       
/** Setter implementation for property mailEnabled
 *
 */
- (void) setMailEnabled: (bool) value {
    _mailEnabled = value;
    [self valueChangedFor:@"mailEnabled"];
}
       
/** Setter implementation for property mailNickname
 *
 */
- (void) setMailNickname: (NSString *) value {
    _mailNickname = value;
    [self valueChangedFor:@"mailNickname"];
}
       
/** Setter implementation for property onPremisesLastSyncDateTime
 *
 */
- (void) setOnPremisesLastSyncDateTime: (NSDate *) value {
    _onPremisesLastSyncDateTime = value;
    [self valueChangedFor:@"onPremisesLastSyncDateTime"];
}
       
/** Setter implementation for property onPremisesSecurityIdentifier
 *
 */
- (void) setOnPremisesSecurityIdentifier: (NSString *) value {
    _onPremisesSecurityIdentifier = value;
    [self valueChangedFor:@"onPremisesSecurityIdentifier"];
}
       
/** Setter implementation for property onPremisesSyncEnabled
 *
 */
- (void) setOnPremisesSyncEnabled: (bool) value {
    _onPremisesSyncEnabled = value;
    [self valueChangedFor:@"onPremisesSyncEnabled"];
}
       
/** Setter implementation for property proxyAddresses
 *
 */
- (void) setProxyAddresses: (NSMutableArray *) value {
    _proxyAddresses = value;
    [self valueChangedFor:@"proxyAddresses"];
}
       
/** Setter implementation for property securityEnabled
 *
 */
- (void) setSecurityEnabled: (bool) value {
    _securityEnabled = value;
    [self valueChangedFor:@"securityEnabled"];
}
       
/** Setter implementation for property visibility
 *
 */
- (void) setVisibility: (NSString *) value {
    _visibility = value;
    [self valueChangedFor:@"visibility"];
}
       
/** Setter implementation for property accessType
 *
 */
- (void) setAccessType: (MSGraphGroupAccessType) value {
    _accessType = value;
    [self valueChangedFor:@"AccessType"];
}
       

- (void)setAccessTypeString:(NSString *)string {
        
    _accessType = [MSGraphGroupAccessTypeSerializer fromString:string];
    [self valueChangedFor:@"AccessType"]; 
}

/** Setter implementation for property allowExternalSenders
 *
 */
- (void) setAllowExternalSenders: (bool) value {
    _allowExternalSenders = value;
    [self valueChangedFor:@"AllowExternalSenders"];
}
       
/** Setter implementation for property autoSubscribeNewMembers
 *
 */
- (void) setAutoSubscribeNewMembers: (bool) value {
    _autoSubscribeNewMembers = value;
    [self valueChangedFor:@"AutoSubscribeNewMembers"];
}
       
/** Setter implementation for property isFavorite
 *
 */
- (void) setIsFavorite: (bool) value {
    _isFavorite = value;
    [self valueChangedFor:@"IsFavorite"];
}
       
/** Setter implementation for property isSubscribedByMail
 *
 */
- (void) setIsSubscribedByMail: (bool) value {
    _isSubscribedByMail = value;
    [self valueChangedFor:@"IsSubscribedByMail"];
}
       
/** Setter implementation for property unseenCount
 *
 */
- (void) setUnseenCount: (int) value {
    _unseenCount = value;
    [self valueChangedFor:@"UnseenCount"];
}
       
/** Setter implementation for property members
 *
 */
- (void) setMembers: (NSMutableArray *) value {
    _members = value;
    [self valueChangedFor:@"members"];
}
       
/** Setter implementation for property memberOf
 *
 */
- (void) setMemberOf: (NSMutableArray *) value {
    _memberOf = value;
    [self valueChangedFor:@"memberOf"];
}
       
/** Setter implementation for property createdOnBehalfOf
 *
 */
- (void) setCreatedOnBehalfOf: (MSGraphDirectoryObject *) value {
    _createdOnBehalfOf = value;
    [self valueChangedFor:@"createdOnBehalfOf"];
}
       
/** Setter implementation for property owners
 *
 */
- (void) setOwners: (NSMutableArray *) value {
    _owners = value;
    [self valueChangedFor:@"owners"];
}
       
/** Setter implementation for property threads
 *
 */
- (void) setThreads: (NSMutableArray *) value {
    _threads = value;
    [self valueChangedFor:@"Threads"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSGraphCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property conversations
 *
 */
- (void) setConversations: (NSMutableArray *) value {
    _conversations = value;
    [self valueChangedFor:@"Conversations"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSGraphProfilePhoto *) value {
    _photo = value;
    [self valueChangedFor:@"Photo"];
}
       
/** Setter implementation for property acceptedSenders
 *
 */
- (void) setAcceptedSenders: (NSMutableArray *) value {
    _acceptedSenders = value;
    [self valueChangedFor:@"AcceptedSenders"];
}
       
/** Setter implementation for property rejectedSenders
 *
 */
- (void) setRejectedSenders: (NSMutableArray *) value {
    _rejectedSenders = value;
    [self valueChangedFor:@"RejectedSenders"];
}
       
/** Setter implementation for property drive
 *
 */
- (void) setDrive: (MSGraphDrive *) value {
    _drive = value;
    [self valueChangedFor:@"drive"];
}
       

@end
